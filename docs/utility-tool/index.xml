<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ユーティリティー関数 on minoru&#39;s Emacs Config</title>
    <link>https://minorugh.github.io/emacs.d/utility-tool/</link>
    <description>Recent content in ユーティリティー関数 on minoru&#39;s Emacs Config</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 29 Aug 2022 06:03:08 +0900</lastBuildDate><atom:link href="https://minorugh.github.io/emacs.d/utility-tool/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>12.1. delete-no-contens</title>
      <link>https://minorugh.github.io/emacs.d/utility-tool/del-no-contents/</link>
      <pubDate>Mon, 29 Aug 2022 06:03:08 +0900</pubDate>
      
      <guid>https://minorugh.github.io/emacs.d/utility-tool/del-no-contents/</guid>
      <description>空になったファイルを自動的に削除 空になったファイルを kill-buffer することで自動的にファイルを削除します。
なにげに便利なのですが、とりあえずファイル名だけつけて内容は後で…というようなシーンでは空行を入れておくなどしないと消えてしまいます。
(defun my:delete-file-if-no-contents () &amp;#34;Automatic deletion for empty files (Valid in all modes).&amp;#34; (when (and (buffer-file-name (current-buffer)) (= (point-min) (point-max))) (delete-file (buffer-file-name (current-buffer))))) (if (not (memq &amp;#39;my:delete-file-if-no-contents after-save-hook)) (setq after-save-hook (cons &amp;#39;my:delete-file-if-no-contents after-save-hook))) バッファーのファイルを強制的に削除 危険なのであまりお薦めできませんが…
安全のために確認するようにしてます。
(defun my:delete-this-file () &amp;#34;Delete the current file, and kill the buffer.&amp;#34; (interactive) (unless (buffer-file-name) (error &amp;#34;No file is currently being edited&amp;#34;)) (when (yes-or-no-p (format &amp;#34;Really delete &amp;#39;%s&amp;#39;?&amp;#34; (file-name-nondirectory buffer-file-name))) (delete-file (buffer-file-name)) (kill-this-buffer))) </description>
    </item>
    
    <item>
      <title>12.2. emacs-lok-mode</title>
      <link>https://minorugh.github.io/emacs.d/utility-tool/emacs-lock/</link>
      <pubDate>Mon, 29 Aug 2022 06:03:08 +0900</pubDate>
      
      <guid>https://minorugh.github.io/emacs.d/utility-tool/emacs-lock/</guid>
      <description>Scratch バッファーを消さない 難しい関数を設定せずともビルトインコマンドで簡単に実現できます。
;; Set buffer that can not be killed (with-current-buffer &amp;#34;*scratch*&amp;#34; (emacs-lock-mode &amp;#39;kill)) (with-current-buffer &amp;#34;*Messages*&amp;#34; (emacs-lock-mode &amp;#39;kill)) </description>
    </item>
    
    <item>
      <title>12.3. ps-priter</title>
      <link>https://minorugh.github.io/emacs.d/utility-tool/ps-print/</link>
      <pubDate>Mon, 29 Aug 2022 06:03:08 +0900</pubDate>
      
      <guid>https://minorugh.github.io/emacs.d/utility-tool/ps-print/</guid>
      <description>PS-Printer での印刷 EmacsからPostscript経由で印刷する際の個人的な設定です。
Postscript 対応のプリンターが必要。
(defalias &amp;#39;ps-mule-header-string-charsets &amp;#39;ignore) (setq ps-multibyte-buffer &amp;#39;non-latin-printer ps-paper-type &amp;#39;a4 ps-font-size 9 ;; ps-font-family &amp;#39;Helvetica ps-font-family &amp;#39;Courier ps-line-number-font &amp;#39;Courier ps-printer-name nil ps-print-header nil ps-show-n-of-n t ps-line-number t ps-print-footer nil) </description>
    </item>
    
    <item>
      <title>12.4. open terminal</title>
      <link>https://minorugh.github.io/emacs.d/utility-tool/terminal/</link>
      <pubDate>Mon, 29 Aug 2022 06:03:08 +0900</pubDate>
      
      <guid>https://minorugh.github.io/emacs.d/utility-tool/terminal/</guid>
      <description>gnome-terminal を Emacsから呼び出す Emacsで開いているbuffer のcurrent-dir で gnome-terminal を起動させます。
こちらを使うようになってからはeshell を使う機会が減りました。
(defun term-current-dir-open () &amp;#34;Open terminal application in current dir.&amp;#34; (interactive) (let ((dir (directory-file-name default-directory))) (compile (concat &amp;#34;gnome-terminal --working-directory &amp;#34; dir)))) (bind-key &amp;#34;&amp;lt;f4&amp;gt;&amp;#34; &amp;#39;term-current-dir-open) </description>
    </item>
    
    <item>
      <title>12.5. open thunar</title>
      <link>https://minorugh.github.io/emacs.d/utility-tool/thunar/</link>
      <pubDate>Mon, 29 Aug 2022 06:03:08 +0900</pubDate>
      
      <guid>https://minorugh.github.io/emacs.d/utility-tool/thunar/</guid>
      <description>Thunarを Emacsから呼び出す Emacsで開いている buffer のcurrent-dir で Debian の Thuner を開きます。
使う機会は少ないと思いますが&amp;hellip;
(defun filer-current-dir-open () &amp;#34;Open filer in current dir.&amp;#34; (interactive) (compile (concat &amp;#34;Thunar &amp;#34; default-directory))) (bind-key &amp;#34;&amp;lt;f3&amp;gt;&amp;#34; &amp;#39;filer-current-dir-open) </description>
    </item>
    
    <item>
      <title>12.6. restart-emacs</title>
      <link>https://minorugh.github.io/emacs.d/utility-tool/restart/</link>
      <pubDate>Mon, 29 Aug 2022 06:03:08 +0900</pubDate>
      
      <guid>https://minorugh.github.io/emacs.d/utility-tool/restart/</guid>
      <description>[restart-emacs.el] Emacsを再起動させる 🔗 iqbalansari/restart-emacs: A simple emacs package to restart emacs from within emacs.
restart-emacs は、Emacsを再起動させるコマンドです。
C-u の数で再起動の方法を制御できます。
M-x restart-emacs 通常のEmacsを立ち上げる C-u M-x restart-emacs emacs &amp;ndash;debug-init C-u C-u M-x restart-emacs emacs -Q C-u C-u C-u M-x restart-emacs 引数を尋ねる (leaf restart-emacs :ensure t :bind (&amp;#34;C-x C-c&amp;#34; . restart-emacs)) </description>
    </item>
    
    <item>
      <title>12.7. open with sudo</title>
      <link>https://minorugh.github.io/emacs.d/utility-tool/open-sudo/</link>
      <pubDate>Mon, 29 Aug 2022 06:03:08 +0900</pubDate>
      
      <guid>https://minorugh.github.io/emacs.d/utility-tool/open-sudo/</guid>
      <description>ファイルをsudoで開き直す 🔗 Emacs でファイルをsudoで開き直す
上記Tipsからのパクリです。 root所有なファイルを開いた時だけ、sudoで開き直すか聞いてきます。
;; Automatically open root permission file with sudo (defun file-root-p (filename) &amp;#34;Return t if file FILENAME created by root.&amp;#34; (eq 0 (nth 2 (file-attributes filename)))) (defadvice find-file (around my:find-file activate) &amp;#34;Open FILENAME using tramp&amp;#39;s sudo method if it&amp;#39;s root permission.&amp;#34; (if (and (file-root-p (ad-get-arg 0)) (not (file-writable-p (ad-get-arg 0))) (y-or-n-p (concat (ad-get-arg 0) &amp;#34; is root permission. Open it as root? &amp;#34;))) (my:find-file-sudo (ad-get-arg 0)) ad-do-it)) (defun my:find-file-sudo (file) &amp;#34;Opens FILE with root privileges.</description>
    </item>
    
    <item>
      <title>12.8. eshell</title>
      <link>https://minorugh.github.io/emacs.d/utility-tool/eshell/</link>
      <pubDate>Mon, 29 Aug 2022 06:03:08 +0900</pubDate>
      
      <guid>https://minorugh.github.io/emacs.d/utility-tool/eshell/</guid>
      <description>eshell を使う eshell はEmacs上で使えるビルトインのターミナルエミュレータートです。
現在のバッファのディレクトリをカレントとしてeshell を起動するようにしています。
(leaf eshell :after popwin :bind (&amp;#34;s-z&amp;#34; . eshell) :custom `((eshell-directory-name . ,&amp;#34;~/.emacs.d/tmp/eshell&amp;#34;) (eshell-cmpl-ignore-case . t) (eshell-ask-to-save-history . (quote always)) (eshell-cmpl-cycle-completions . t) (eshell-cmpl-cycle-cutoff-length . 5) (eshell-history-file-name . ,&amp;#34;~/Dropbox/backup/zsh/.zsh_history&amp;#34;) (eshell-hist-ignoredups . t) (eshell-prompt-function . &amp;#39;my:eshell-prompt) (eshell-prompt-regexp . &amp;#34;^[^#$]*[$#] &amp;#34;)) :config (setq eshell-command-aliases-list (append (list (list &amp;#34;cl&amp;#34; &amp;#34;clear eshell&amp;#34;) (list &amp;#34;ll&amp;#34; &amp;#34;ls -ltr&amp;#34;) (list &amp;#34;la&amp;#34; &amp;#34;ls -a&amp;#34;) (list &amp;#34;ex&amp;#34; &amp;#34;exit&amp;#34;)))) :init (push &amp;#39;(&amp;#34;*eshell*&amp;#34; :height 0.6) popwin:special-display-config) (defun my:eshell-prompt () &amp;#34;Prompt change string.</description>
    </item>
    
    <item>
      <title>12.9. google-translate</title>
      <link>https://minorugh.github.io/emacs.d/utility-tool/translate/</link>
      <pubDate>Mon, 29 Aug 2022 06:03:08 +0900</pubDate>
      
      <guid>https://minorugh.github.io/emacs.d/utility-tool/translate/</guid>
      <description>[google-translate.el] Google翻訳サービスを使用して文字列を翻訳 🔗 atykhonov/google-translate: Emacs interface to Google Translate.
この設定は、@masasam の Sollst Work Blog で公開されている設定をパクりました。
リージョンが日本語なら ja to en に、英語なら en to ja にと自動判別して実行してくれます。
(leaf google-translate :ensure t :bind ((&amp;#34;C-t&amp;#34; . google-translate-auto) (&amp;#34;C-c t&amp;#34; chromium-translate)) :config (defun google-translate-auto () &amp;#34;Automatically recognize and translate Japanese and English.&amp;#34; (interactive) (if (use-region-p) (let ((string (buffer-substring-no-properties (region-beginning) (region-end)))) (deactivate-mark) (if (string-match (format &amp;#34;\\`[%s]+\\&amp;#39;&amp;#34; &amp;#34;[:ascii:]&amp;#34;) string) (google-translate-translate &amp;#34;en&amp;#34; &amp;#34;ja&amp;#34; string) (google-translate-translate &amp;#34;ja&amp;#34; &amp;#34;en&amp;#34; string))) (let ((string (read-string &amp;#34;Google Translate: &amp;#34;))) (if (string-match (format &amp;#34;\\`[%s]+\\&amp;#39;&amp;#34; &amp;#34;[:ascii:]&amp;#34;) string) (google-translate-translate &amp;#34;en&amp;#34; &amp;#34;ja&amp;#34; string) (google-translate-translate &amp;#34;ja&amp;#34; &amp;#34;en&amp;#34; string))))) (defun google-translate--get-b-d1 () &amp;#34;Fix error of `Failed to search TKK`.</description>
    </item>
    
  </channel>
</rss>
